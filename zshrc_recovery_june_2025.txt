export PATH="/Users/nathan.ojieabu/.pyenv/versions/3.13.3/bin:/opt/homebrew/opt/mysql-client/bin:/Users/nathan.ojieabu/.pyenv/shims:/Users/nathan.ojieabu/.rbenv/shims:/Users/nathan.ojieabu/.local/bin:/Users/nathan.ojieabu/.pyenv/bin:/opt/homebrew/bin:/Users/nathan.ojieabu/.local/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Users/nathan.ojieabu/.pyenv/versions/3.13.3/bin:/Users/nathan.ojieabu/.local/bin"
check='echo $AWS_PROFILE'
devtools='aws ssm start-session --target i-0980e188de058576e --document-name AWS-StartPortForwardingSession --parameters "localPortNumber=55678,portNumber=3389"'
run-help=man
tfapply='terraform apply "$(ls -w1 -t ~/ops/tfplans/${AWS_PROFILE}_$(basename $(pwd))_* | head -1)"'
tfinit='terraform init'
tflock='terraform providers lock -platform="linux_amd64" -platform="darwin_amd64" -platform="darwin_arm64"'
tfplan='terraform plan -out ~/ops/tfplans/"$AWS_PROFILE"_"$(basename $(pwd))"_"$(date +%F_%H_%M_%S)".tfplan'
tfreconfigure='terraform init -reconfigure'
tfshow='terraform show -no-color "$(ls -w1 -t ~/ops/tfplans/${AWS_PROFILE}_$(basename $(pwd))_* | head -1)"'
tfupdate='terraform init --upgrade && tflock'
which-command=whence
__vsc_command_complete () {
	if [[ "$__vsc_current_command" == "" ]]
	then
		builtin printf '\e]633;D\a'
	else
		builtin printf '\e]633;D;%s\a' "$__vsc_status"
	fi
	__vsc_update_cwd
}
__vsc_command_output_start () {
	builtin printf '\e]633;E;%s;%s\a' "$(__vsc_escape_value "${__vsc_current_command}")" $__vsc_nonce
	builtin printf '\e]633;C\a'
}
__vsc_continuation_end () {
	builtin printf '\e]633;G\a'
}
__vsc_continuation_start () {
	builtin printf '\e]633;F\a'
}
__vsc_escape_value () {
	builtin emulate -L zsh
	builtin local LC_ALL=C str="$1" i byte token out=''
	for ((i = 0; i < ${#str}; ++i )) do
		byte="${str:$i:1}"
		if [ "$byte" = "\\" ]
		then
			token="\\\\"
		elif [ "$byte" = ";" ]
		then
			token="\\x3b"
		elif [ "$byte" = $'\n' ]
		then
			token="\x0a"
		else
			token="$byte"
		fi
		out+="$token"
	done
	builtin print -r "$out"
}
__vsc_precmd () {
	builtin local __vsc_status="$?"
	if [ -z "${__vsc_in_command_execution-}" ]
	then
		__vsc_command_output_start
	fi
	__vsc_command_complete "$__vsc_status"
	__vsc_current_command=""
	if [ -n "$__vsc_in_command_execution" ]
	then
		__vsc_update_prompt
	fi
}
__vsc_preexec () {
	PS1="$__vsc_prior_prompt"
	PS2="$__vsc_prior_prompt2"
	if [ -n "$RPROMPT" ]
	then
		RPROMPT="$__vsc_prior_rprompt"
	fi
	__vsc_in_command_execution="1"
	__vsc_current_command=$1
	__vsc_command_output_start
}
__vsc_prompt_end () {
	builtin printf '\e]633;B\a'
}
__vsc_prompt_start () {
	builtin printf '\e]633;A\a'
}
__vsc_right_prompt_end () {
	builtin printf '\e]633;I\a'
}
__vsc_right_prompt_start () {
	builtin printf '\e]633;H\a'
}
__vsc_update_cwd () {
	builtin printf '\e]633;P;Cwd=%s\a' "$(__vsc_escape_value "${PWD}")"
}
__vsc_update_prompt () {
	__vsc_prior_prompt="$PS1"
	__vsc_prior_prompt2="$PS2"
	__vsc_in_command_execution=""
	PS1="%{$(__vsc_prompt_start)%}$PS1%{$(__vsc_prompt_end)%}"
	PS2="%{$(__vsc_continuation_start)%}$PS2%{$(__vsc_continuation_end)%}"
	if [ -n "$RPROMPT" ]
	then
		__vsc_prior_rprompt="$RPROMPT"
		RPROMPT="%{$(__vsc_right_prompt_start)%}$RPROMPT%{$(__vsc_right_prompt_end)%}"
	fi
}
_aws_profiles () {
	case $SHELL in
		(/bin/bash) local word="${COMP_WORDS[COMP_CWORD]}"
			COMPREPLY=($(compgen -W "$(aws_profiles)" -- "$word"))  ;;
		(/bin/zsh) reply=($(aws_profiles))  ;;
	esac
}
_pyenv () {
	local words completions
	read -cA words
	if [ "${#words}" -eq 2 ]
	then
		completions="$(pyenv commands)"
	else
		completions="$(pyenv completions ${words[2,-2]})"
	fi
	reply=(${(ps:\n:)completions})
}
_set_colors () {
	case $1 in
		(red) set_bg_color 50 0 0
			set_tab_color 270 60 83 ;;
		(blue) set_bg_color 0 0 230
			set_tab_color 0 0 255 ;;
		(green) set_bg_color 0 33 0
			set_tab_color 57 197 77 ;;
		(purple) set_bg_color 40 10 50
			set_tab_color 120 30 120 ;;
		(yellow) set_bg_color 255 255 0
			set_tab_color 255 255 0 ;;
	esac
}
add-zsh-hook () {
	emulate -L zsh
	local -a hooktypes
	hooktypes=(chpwd precmd preexec periodic zshaddhistory zshexit zsh_directory_name)
	local usage="Usage: add-zsh-hook hook function\nValid hooks are:\n  $hooktypes"
	local opt
	local -a autoopts
	integer del list help
	while getopts "dDhLUzk" opt
	do
		case $opt in
			(d) del=1  ;;
			(D) del=2  ;;
			(h) help=1  ;;
			(L) list=1  ;;
			([Uzk]) autoopts+=(-$opt)  ;;
			(*) return 1 ;;
		esac
	done
	shift $(( OPTIND - 1 ))
	if (( list ))
	then
		typeset -mp "(${1:-${(@j:|:)hooktypes}})_functions"
		return $?
	elif (( help || $# != 2 || ${hooktypes[(I)$1]} == 0 ))
	then
		print -u$(( 2 - help )) $usage
		return $(( 1 - help ))
	fi
	local hook="${1}_functions"
	local fn="$2"
	if (( del ))
	then
		if (( ${(P)+hook} ))
		then
			if (( del == 2 ))
			then
				set -A $hook ${(P)hook:#${~fn}}
			else
				set -A $hook ${(P)hook:#$fn}
			fi
			if (( ! ${(P)#hook} ))
			then
				unset $hook
			fi
		fi
	else
		if (( ${(P)+hook} ))
		then
			if (( ${${(P)hook}[(I)$fn]} == 0 ))
			then
				typeset -ga $hook
				set -A $hook ${(P)hook} $fn
			fi
		else
			typeset -ga $hook
			set -A $hook $fn
		fi
		autoload $autoopts -- $fn
	fi
}
ash () {
	aws ssm start-session --target $1
}
asp () {
	if [[ -z "$1" ]]
	then
		unset AWS_DEFAULT_PROFILE AWS_PROFILE AWS_EB_PROFILE
		echo AWS profile cleared.
		return
	fi
	local -a available_profiles
	available_profiles=($(aws_profiles))
	if [[ -z "${available_profiles[(r)$1]}" ]]
	then
		echo "${fg[red]}Profile '$1' not found in '${AWS_CONFIG_FILE:-$HOME/.aws/config}'" >&2
		echo "Available profiles: ${(j:, :)available_profiles:-no profiles found}${reset_color}" >&2
		return 1
	fi
	export AWS_DEFAULT_PROFILE=$1
	export AWS_PROFILE=$1
	export AWS_EB_PROFILE=$1
}
aws-auth () {
	if [[ -z "$1" ]]
	then
		unset AWS_DEFAULT_PROFILE AWS_PROFILE AWS_EB_PROFILE
		echo AWS profile cleared.
		return
	fi
	local -a available_profiles
	available_profiles=($(aws_profiles))
	case $SHELL in
		(/bin/bash) if [[ ! "${available_profiles[@]}" =~ " $1 " ]]
			then
				echo "Profile '$1' not found in '${AWS_CONFIG_FILE:-$HOME/.aws/config}'" >&2
				echo "Available profiles: '${available_profiles[@]:-no profiles found}'" >&2
				return 1
			fi ;;
		(/bin/zsh) if [[ -z "${available_profiles[(r)$1]}" ]]
			then
				echo "${fg[red]}Profile '$1' not found in '${AWS_CONFIG_FILE:-$HOME/.aws/config}'" >&2
				echo "Available profiles: ${(j:, :)available_profiles:-no profiles found}${reset_color}" >&2
				return 1
			fi ;;
	esac
	export AWS_DEFAULT_PROFILE="$1"
	export AWS_PROFILE="$1"
	export AWS_EB_PROFILE="$1"
	aws sso login && awssso && set_colors "$1" && aws-whoami && aws-ssh-agent-update "$1"
}
aws-dns-record () {
	dns_record=${1}
	domain=${2}
	if [[ -z "$dns_record" ]] || [[ -z "$domain" ]]
	then
		echo "Must specify dns_record and domain name. Example: aws-dns-record skyline benevity-devtools.org"
		return 1
	fi
	HOSTED_ZONE=`aws route53 list-hosted-zones-by-name --dns-name ${2} | jq '.HostedZones[].Id' | sed -E 's/"\/hostedzone\/(.*)"/\1/g'`
	aws route53 list-resource-record-sets --hosted-zone-id ${HOSTED_ZONE} --query "ResourceRecordSets[?Name == '${1}.${2}.']"
}
aws-list () {
	if [[ -n $1 ]]
	then
		filter="--filters \"Name=instance-state-name,Values=running\" \"Name=tag:Name,Values=*$1*\""
	else
		filter="--filters \"Name=instance-state-name,Values=running\""
	fi
	eval "aws ec2 describe-instances ${filter} --query \"Reservations[].Instances[].{Ip:PrivateIpAddress,State:State.Name,Name:Tags[?Key=='Name'].Value|[0],ServerRole:Tags[?Key=='serverrole'].Value|[0],Id:InstanceId}|sort_by(@,&Name)[]\" --output table"
}
aws-list-detail () {
	instance_name=$1
	region=$2
	if [[ -z "$region" ]]
	then
		region=$AWS_REGION
	fi
	aws ec2 describe-instances --query "Reservations[*].Instances[*].[
      Tags[?Key=='Name'] | [0].Value,
      Tags[?Key=='environment'] | [0].Value,
      Tags[?Key=='kingdom'] | [0].Value,
      Tags[?Key=='species'] | [0].Value,
      LaunchTime,
      InstanceId,
      NetworkInterfaces[].PrivateIpAddresses[].PrivateIpAddress | [0],
      NetworkInterfaces[].PrivateIpAddresses[].PrivateIpAddress | [1],
      PublicIpAddress,
      InstanceType,
      State.Name
    ] | sort_by(@, &@[0][0])" --filters "Name=tag-value,Values=*$instance_name*" --output table --region $region
}
aws-ssh-agent-update () {
	if $ENABLE_SSH_KEY_MANAGEMENT
	then
		local AWS_PEM
		case $1 in
			(benevity_live_prod) AWS_PEM="${SSH_KEY_DIR}bastion.benevity-live.org"  ;;
			(benevity_live_dr) AWS_PEM="${SSH_KEY_DIR}bastion.benevity-live-dr.org"  ;;
			(benevity_live_preprod) AWS_PEM="${SSH_KEY_DIR}bastion.benevity-preprod.org"  ;;
			(benevity_live_staging) AWS_PEM="${SSH_KEY_DIR}bastion.benevity-staging.org"  ;;
			(benevity_staging_uat) AWS_PEM="${SSH_KEY_DIR}bastion.benevity-uat.org"  ;;
			(benevity_shared_prod) AWS_PEM="${SSH_KEY_DIR}bastion.benevity-shared.org"  ;;
			(benevity_mgmt_security) AWS_PEM="${SSH_KEY_DIR}bastion.benevity-security.org"  ;;
			(*) return ;;
		esac
		eval $(ssh-agent) > /dev/null 2>&1
		ssh-add -D > /dev/null 2>&1
		ssh-add "$AWS_PEM"
	fi
}
aws-whoami () {
	aws sts get-caller-identity
}
aws_profile_short () {
	if [[ -n "$AWS_PROFILE" ]]
	then
		local short_name="${AWS_PROFILE#benevity_}"
		local color=""
		case "$AWS_PROFILE" in
			(*_prod | *_prod_*) color="%F{red}"  ;;
			(*_preprod | *_staging | *_stage*) color="%F{yellow}"  ;;
			(*_dev | *_qa | *_test*) color="%F{green}"  ;;
			(*) color="%F{cyan}"  ;;
		esac
		echo " ${color}[aws:${short_name}]%f"
	fi
}
aws_profiles () {
	[[ -r "${AWS_CONFIG_FILE:-$HOME/.aws/config}" ]] || return 1
	grep --color=never -Eo '\[.*\]' "${AWS_CONFIG_FILE:-$HOME/.aws/config}" | sed -E 's/^[[:space:]]*\[(profile)?[[:space:]]*([-_[:alnum:]\.@]+)\][[:space:]]*$/\2/g'
}
confd-lookup () {
	filter="/"
	if [[ -n $1 ]]
	then
		filter="$1"
	fi
	echo "DynamoDB:"
	aws dynamodb scan --table-name confd-backend --scan-filter '{
      "key": {
        "AttributeValueList": [ { "S": '\""${filter}"\"' } ],
        "ComparisonOperator": "CONTAINS"
      }
    }' --query 'Items[].[key.S,value.S]' --output table
	ssm_params=$(aws ssm describe-parameters \
    --parameter-filters "Key=Name,Option=Contains,Values=$filter" \
    --query 'Parameters[].Name' \
    --output json)
	echo "SSM:"
	get_parameters_in_batches "$ssm_params"
}
confd-update () {
	name=$1
	value=$2
	ssm_param_type=$3
	kms_key_arn=$4
	if [[ -z "$name" ]] || [[ -z "$value" ]]
	then
		echo "Must specify parameter name and value"
		return 1
	fi
	ssm_params=$(jq -Rn '{
    "Name": '\"${name}\"',
    "Value": '\"${value}\"',
    "Overwrite": true
  }')
	if [[ -z "$ssm_param_type" ]] || [[ "$ssm_param_type" == "String" ]]
	then
		ssm_params=$(echo "$ssm_params" | jq '. + { "Type": "String" }')
	elif [[ "$ssm_param_type" == "SecureString" ]]
	then
		ssm_params=$(
      echo "$ssm_params" | jq '. +
      {
        "Type": "SecureString",
        "KeyId": '\"${kms_key_arn}\"'
      }'
    )
	fi
	aws dynamodb put-item --table-name confd-backend --item '{
    "key": { "S": '\"${name}\"'},
    "value": { "S": '\"${value}\"'}
  }'
	aws ssm put-parameter --cli-input-json "$ssm_params"
}
confd-vlookup () {
	filter="/"
	if [[ -n $1 ]]
	then
		filter="$1"
	fi
	echo "DynamoDB:"
	aws dynamodb scan --table-name confd-backend --scan-filter '{
      "value": {
        "AttributeValueList": [ { "S": '\""${filter}"\"' } ],
        "ComparisonOperator": "CONTAINS"
      }
    }' --query 'Items[].[key.S,value.S]' --output text
}
db () {
	db_name=$1
	strongdm-ready
	sdm connect "$db_name"
	db_status=$(sdm status --filter "name:${db_name}" -j)
	hostname=$(jq -r '.[].hostname' <<< "$db_status")
	port=$(jq -r '.[].port' <<< "$db_status")
	type=$(jq -r '.[].type' <<< "$db_status")
	echo "Connecting to $hostname:$port"
	if [[ $type == *mysql* ]]
	then
		mysql -A -h 127.0.0.1 -P "$port"
	fi
}
db-list () {
	db_name=$1
	strongdm-ready
	sdm status --filter "name:*${db_name}*" -j | jq '.[] | {name: .name, connection_status: .connection_status, port: .port}'
}
db-list-full () {
	db_name=$1
	strongdm-ready
	sdm status --filter "name:*${db_name}*"
}
db-send-query () {
	db_name=$1
	query=$2
	strongdm-ready
	sdm connect "$db_name"
	db_status=$(sdm status --filter "name:${db_name}" -j)
	port=$(jq '.[].port' <<< "$db_status")
	type=$(jq '.[].type' <<< "$db_status")
	if [[ $type == *mysql* ]]
	then
		mysql -A -h 127.0.0.1 -P "$port" -e "$query"
	fi
}
get_parameters_in_batches () {
	local json_list="$1"
	local batch_size=10
	local total_params
	total_params=$(echo "$json_list" | jq '. | length')
	for ((i = 0; i < total_params; i += batch_size)) do
		batch=$(echo "$json_list" | jq -r ".[$i:$((i + batch_size))]")
		echo "SSM params $i to $(( total_params < i + batch_size ? total_params : i + batch_size )) (total $total_params)"
		aws ssm get-parameters --cli-input-json '{ "Names": '"$batch"' }' --query 'Parameters[*].[Name,Value,Type]' --with-decryption --output table
	done
}
is-at-least () {
	# undefined
	builtin autoload -XUz
}
parse_git_branch () {
	git branch 2> /dev/null | sed -n -e 's/^\* \(.*\)/[\1]/p'
}
parse_git_repo () {
	if git rev-parse --is-inside-work-tree > /dev/null 2>&1
	then
		basename "$(git rev-parse --show-toplevel)" 2> /dev/null
	fi
}
pyenv () {
	local command=${1:-}
	[ "$#" -gt 0 ] && shift
	case "$command" in
		(rehash | shell) eval "$(pyenv "sh-$command" "$@")" ;;
		(*) command pyenv "$command" "$@" ;;
	esac
}
rbenv () {
	local command
	command="${1:-}"
	if [ "$#" -gt 0 ]
	then
		shift
	fi
	case "$command" in
		(rehash | shell) eval "$(rbenv "sh-$command" "$@")" ;;
		(*) command rbenv "$command" "$@" ;;
	esac
}
set_bg_color () {
	if $ENABLE_SET_BACKGROUND_COLOR
	then
		/usr/bin/osascript <<EOT
tell application "iTerm"
    tell the current window
        tell the current session
            set background color to {$(($1 * 65535 / 255)), $(($2 * 65535 / 255)), $(($3 * 65535 / 255))}
        end tell
    end tell
end tell
EOT
	fi
}
set_colors () {
	if [ -z "$1" ]
	then
		echo "Profile name required to set colors"
		return
	fi
	case $1 in
		(benevity_live_prod) _set_colors red ;;
		(benevity_live_preprod) _set_colors green ;;
		(benevity_live_staging) _set_colors purple ;;
		(benevity_staging_uat) _set_colors green ;;
		(benevity_live_dr) _set_colors purple ;;
		(benevity_core_pipeline) _set_colors purple ;;
		(benevity_master) _set_colors purple ;;
		(benevity_mgmt_iam) _set_colors purple ;;
		(benevity_mgmt_security) _set_colors purple ;;
		(benevity_product_dev) _set_colors green ;;
		(benevity_product_devtools) _set_colors purple ;;
		(benevity_product_poc) _set_colors green ;;
		(benevity_product_qa) _set_colors green ;;
		(benevity_shared_prod) _set_colors red ;;
		(benevity_shared_qa) _set_colors green ;;
		(benevity_sre_qa) _set_colors green ;;
		(benevity_streams_prod) _set_colors red ;;
		(benevity_streams_pre_prod) _set_colors green ;;
		(benevity_streams_uat) _set_colors green ;;
		(benevity_grantsdev_shared) _set_colors green ;;
		(benevity_dev_versaic) _set_colors purple ;;
		(benevity_devtest_versaic) _set_colors green ;;
		(benevity_poc_versaic) _set_colors green ;;
		(benevity_prod_versaic) _set_colors red ;;
		(benevity_prodtest_versaic) _set_colors green ;;
		(benevity_sandbox_versaic) _set_colors purple ;;
		(benevity_sandboxtest_versaic) _set_colors green ;;
		(benevity_shared_versaic) _set_colors red ;;
		(benevity_stage_versaic) _set_colors purple ;;
		(benevity_stagetest_versaic) _set_colors green ;;
		(benevity_uat_versaic) _set_colors purple ;;
		(*) echo "Warning: $1 does not have a defined color scheme, using yellow!"
			_set_colors yellow ;;
	esac
}
set_tab_color () {
	if $ENABLE_SET_TAB_COLOR
	then
		echo -ne "\033]6;1;bg;red;brightness;$1\a"
		echo -ne "\033]6;1;bg;green;brightness;$2\a"
		echo -ne "\033]6;1;bg;blue;brightness;$3\a"
	fi
}
spark-drush () {
	client=$1
	drush=$2
	ansible "tag_Name_*_drupal_6_job" -m shell -a "/var/www/wpg_v6/vendor/bin/drush --root=/var/www/wpg_v6 -l $client.$AWS_DOMAIN $drush warn=false" -b -f1
}
spark-uli () {
	client=$1
	email=$2
	ansible "tag_Name_*_drupal_6_job" -m shell -a "/var/www/wpg_v6/vendor/bin/drush --root=/var/www/wpg_v6 -l $client.$AWS_DOMAIN uli $email warn=false" -b -f1
}
strongdm-ready () {
	email=$(git config user.email)
	if ! sdm ready --quiet
	then
		echo "starting strongdm"
		sdm ready --gui --quiet
		echo $?
		sdm login --email "$email"
	fi
	i=0
	max_wait=5
	until sdm ready --quiet
	do
		sleep 1
		i+=1
		if [ "$i" -gt $max_wait ]
		then
			sdm ready
			echo "strongdm failed readiness check (error: $?)"
			return
		fi
	done
}
MallocNanoZone=0
USER=nathan.ojieabu
COMMAND_MODE=unix2003
__CFBundleIdentifier=com.todesktop.230313mzl4w4u92
PATH=/Users/nathan.ojieabu/.pyenv/versions/3.13.3/bin:/opt/homebrew/opt/mysql-client/bin:/Users/nathan.ojieabu/.pyenv/shims:/Users/nathan.ojieabu/.rbenv/shims:/Users/nathan.ojieabu/.local/bin:/Users/nathan.ojieabu/.pyenv/bin:/opt/homebrew/bin:/Users/nathan.ojieabu/.local/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Users/nathan.ojieabu/.pyenv/versions/3.13.3/bin:/Users/nathan.ojieabu/.local/bin
LOGNAME=nathan.ojieabu
SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.IkBnw3fE1I/Listeners
HOME=/Users/nathan.ojieabu
SHELL=/bin/zsh
TMPDIR=/var/folders/c5/15x3mm5s2hb5gy5gqbnmbqj00000gp/T/
__CF_USER_TEXT_ENCODING=0x1F6:0x0:0x52
XPC_SERVICE_NAME=0
XPC_FLAGS=0x0
ORIGINAL_XDG_CURRENT_DESKTOP=undefined
CURSOR_TRACE_ID=6b60915ece1441828951ae209c68ecc2
PAGER=head -n 10000 | cat
npm_config_yes=true
DISABLE_AUTO_UPDATE=true
PIP_NO_INPUT=true
COMPOSER_NO_INTERACTION=1
TERM_PROGRAM=vscode
TERM_PROGRAM_VERSION=1.1.3
LANG=en_US.UTF-8
COLORTERM=truecolor
PYDEVD_DISABLE_FILE_VALIDATION=1
VSCODE_DEBUGPY_ADAPTER_ENDPOINTS=/Users/nathan.ojieabu/.cursor/extensions/ms-python.debugpy-2025.8.0-darwin-arm64/.noConfigDebugAdapterEndpoints/endpoint-2b2c8e6b0d97bc8c.txt
BUNDLED_DEBUGPY_PATH=/Users/nathan.ojieabu/.cursor/extensions/ms-python.debugpy-2025.8.0-darwin-arm64/bundled/libs/debugpy
GIT_ASKPASS=/Applications/Cursor.app/Contents/Resources/app/extensions/git/dist/askpass.sh
VSCODE_GIT_ASKPASS_NODE=/Applications/Cursor.app/Contents/Frameworks/Cursor Helper (Plugin).app/Contents/MacOS/Cursor Helper (Plugin)
VSCODE_GIT_ASKPASS_EXTRA_ARGS=
VSCODE_GIT_ASKPASS_MAIN=/Applications/Cursor.app/Contents/Resources/app/extensions/git/dist/askpass-main.js
VSCODE_GIT_IPC_HANDLE=/var/folders/c5/15x3mm5s2hb5gy5gqbnmbqj00000gp/T/vscode-git-d3c3a8f19f.sock
PWD=/Users/nathan.ojieabu/Documents/repos/terraform/benevity_live_staging/client-staging/web/drupal6_legacy
TERM=xterm-256color
SHLVL=1
OLDPWD=/Users/nathan.ojieabu/Documents/repos/terraform
PYENV_ROOT=/Users/nathan.ojieabu/.pyenv
RBENV_SHELL=zsh
PYENV_SHELL=zsh
ENABLE_SET_BACKGROUND_COLOR=true
ENABLE_SET_TAB_COLOR=true
ENABLE_SSH_KEY_MANAGEMENT=true
SSH_KEY_DIR=/Users/nathan.ojieabu/.ssh/
AWS_PAGER=
TFROOT=/Users/nathan.ojieabu/Documents/repos/terraform
TASKROOT=/Users/nathan.ojieabu/Documents/repos/task-notes
RPROMPT=$(aws_profile_short)
PROMPT=${COLOR_DIR}%~ ${COLOR_GIT}$(parse_git_repo) - $(parse_git_branch)${COLOR_DEF} $
TFENV_ARCH=amd64
GODEBUG=asyncpreemptoff=1
AWS_DEFAULT_PROFILE=benevity_core_pipeline
AWS_PROFILE=benevity_core_pipeline
AWS_EB_PROFILE=benevity_core_pipeline
_=/usr/bin/printenv
